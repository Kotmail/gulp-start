/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$a3-name: 'a3';
$a3-x: 0px;
$a3-y: 32px;
$a3-offset-x: 0px;
$a3-offset-y: -32px;
$a3-width: 16px;
$a3-height: 16px;
$a3-total-width: 55px;
$a3-total-height: 264px;
$a3-image: 'sprite.png';
$a3: (0px, 32px, 0px, -32px, 16px, 16px, 55px, 264px, 'sprite.png', 'a3', );
$a4-name: 'a4';
$a4-x: 0px;
$a4-y: 0px;
$a4-offset-x: 0px;
$a4-offset-y: 0px;
$a4-width: 16px;
$a4-height: 12px;
$a4-total-width: 55px;
$a4-total-height: 264px;
$a4-image: 'sprite.png';
$a4: (0px, 0px, 0px, 0px, 16px, 12px, 55px, 264px, 'sprite.png', 'a4', );
$arrow2-name: 'arrow2';
$arrow2-x: 0px;
$arrow2-y: 153px;
$arrow2-offset-x: 0px;
$arrow2-offset-y: -153px;
$arrow2-width: 55px;
$arrow2-height: 111px;
$arrow2-total-width: 55px;
$arrow2-total-height: 264px;
$arrow2-image: 'sprite.png';
$arrow2: (0px, 153px, 0px, -153px, 55px, 111px, 55px, 264px, 'sprite.png', 'arrow2', );
$arrow3-name: 'arrow3';
$arrow3-x: 0px;
$arrow3-y: 68px;
$arrow3-offset-x: 0px;
$arrow3-offset-y: -68px;
$arrow3-width: 32px;
$arrow3-height: 65px;
$arrow3-total-width: 55px;
$arrow3-total-height: 264px;
$arrow3-image: 'sprite.png';
$arrow3: (0px, 68px, 0px, -68px, 32px, 65px, 55px, 264px, 'sprite.png', 'arrow3', );
$spritesheet-width: 55px;
$spritesheet-height: 264px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($a3, $a4, $arrow2, $arrow3, );
$spritesheet: (55px, 264px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
